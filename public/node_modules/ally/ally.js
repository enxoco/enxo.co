"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var flux = require("flux");
var immutable = require("immutable");
var CreateStore = require("./create-store");
var CreateAction = require("./create-action");

var appState = immutable.Map({});
var dispatcher = new flux.Dispatcher();

module.exports = (function () {
  function Ally() {
    _classCallCheck(this, Ally);
  }

  _createClass(Ally, null, [{
    key: "setState",
    value: function setState(key, value) {
      appState = appState.set(key, value);
    }
  }, {
    key: "getState",
    value: function getState(key) {
      return appState.get(key);
    }
  }, {
    key: "getAppState",
    value: function getAppState() {
      return appState;
    }
  }, {
    key: "createStore",
    value: function createStore(storeClass, initialState) {
      var store = new storeClass();

      // set app state
      if (!store.storeName) {
        throw new Error(store.constructor.name + " must have storeName property");
      }
      Ally.setState(store.storeName, initialState);

      // create store
      CreateStore.createApi(Ally, store);
      CreateStore.registerDispatcher(Ally, dispatcher, store);

      return store;
    }
  }, {
    key: "createAction",
    value: function createAction(ActionClass) {
      var action = new ActionClass();

      if (!action.actionName) {
        throw new Error(action.constructor.name + " must have actionName");
      }

      CreateAction.bindActions(action, dispatcher);

      return action;
    }
  }]);

  return Ally;
})();