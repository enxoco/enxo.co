"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var shallowCompare = require("react-addons-shallow-compare");
var _ = require("lodash");

module.exports = function (component) {
  var Immutable = (function (_component) {
    _inherits(Immutable, _component);

    function Immutable() {
      _classCallCheck(this, Immutable);

      _get(Object.getPrototypeOf(Immutable.prototype), "constructor", this).call(this);

      // bind this to methods
      this._getStores = _.bind(this._getStores, this);
      this.shouldComponentUpdate = _.bind(this.shouldComponentUpdate, this);
      this.componentDidMount = _.bind(this.componentDidMount, this);
      this.componentWillUnmount = _.bind(this.componentWillUnmount, this);
      this._onStoreChange = _.bind(this._onStoreChange, this);

      // setup stores
      this._stores = this._getStores(arguments);
    }

    _createClass(Immutable, [{
      key: "_getStores",
      value: function _getStores(argObject) {
        return _.map(argObject, function (store) {
          if (!store.addChangeListener || !store.removeChangeListener) {
            throw new Error("all stores do not implement the proper functions");
          }
          return store;
        });
      }
    }, {
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps, nextState) {
        return shallowCompare(this, nextProps, nextState);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this = this;

        this._stores.forEach(function (store) {
          store.addChangeListener(_this._onStoreChange(store));
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var _this2 = this;

        this._stores.forEach(function (store) {
          store.removeChangeListener(_this2._onStoreChange(store));
        });
      }
    }, {
      key: "_onStoreChange",
      value: function _onStoreChange(store) {
        this.setState({ store: store.getState() });
      }
    }]);

    return Immutable;
  })(component);

  return Immutable;
};