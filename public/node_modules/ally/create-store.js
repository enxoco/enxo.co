"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventEmitter = require("eventemitter3");
var _ = require("lodash");

module.exports = (function () {
  function CreateStore() {
    _classCallCheck(this, CreateStore);
  }

  _createClass(CreateStore, null, [{
    key: "changeEvent",
    value: function changeEvent() {
      return "change";
    }
  }, {
    key: "handleAction",
    value: function handleAction(Ally, store, payload) {
      if (!payload.hasOwnProperty("actionType")) {
        throw new Error("Payload must have actionType");
      }

      // Turn constant into camelCase - TODO_CREATE -> todoCreate
      var actionType = _.camelCase(payload.actionType);

      if (store[actionType]) {
        var storeState = Ally.getState(store.storeName);
        var dispatchResult = store[actionType](storeState, payload);

        if (dispatchResult !== undefined) {
          Ally.setState(store.storeName, dispatchResult);
          store.emitChange();
        }
      }
    }
  }, {
    key: "registerDispatcher",
    value: function registerDispatcher(Ally, dispatcher, store) {
      var handleFn = function handleFn(payload) {
        CreateStore.handleAction(Ally, store, payload);
      };

      store.dispatchToken = dispatcher.register(handleFn);
    }
  }, {
    key: "createApi",
    value: function createApi(Ally, store) {
      var eventEmitter = new EventEmitter();

      store.addChangeListener = function (callback) {
        eventEmitter.on(CreateStore.changeEvent(), callback);
      };
      store.removeChangeListener = function (callback) {
        eventEmitter.removeListener(CreateStore.changeEvent(), callback);
      };
      store.emitChange = function () {
        eventEmitter.emit(CreateStore.changeEvent());
      };
      store.getState = function () {
        return Ally.getState(store.storeName);
      };
    }
  }]);

  return CreateStore;
})();